import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import * as React from "react";
import { useSelector } from "react-redux";
import { useDispatch } from "react-redux";
import { incrementDota, incrementPubg } from "../actions/user/userSlice";
import { addNewWords } from "../actions/words/wordsSlice";
import formatWords from ".././utils/formatWords";

//TODO: нужно подрубить tailwindcss
//  ✅ нужно подрубить tailwindcss
//  ✅ подрубить redux toolkit
//  ✅ написать пару тестов
//  сделать сео оптимизацию
//  немножко микроразметки
// ✅ функционал переворота всех карточек
// ✅ функционал с подсказкой о правильном формате, подсказка будет появляться один раз, затем будет добавлять переменная в localstorage и подсказки не будет
// ✅ функционал с кастомным разделителем
// ✅ функционал с радомным списком карточек

export default function Home() {
	const [words, setWords] = React.useState("");
	const [formatedWords, setFormatedWords] = React.useState<any[]>([]);
	const [flip, setFlip] = React.useState(false);
	const [separator, setSeparator] = React.useState("/");
	const [isHowToUseOpen, setIsHowToUseOpen] = React.useState(false);
	const [isInfoOpen, setIsInfoOpen] = React.useState(false);
	const dispatch = useDispatch();

	const wordsRedux = useSelector((state: any) => state.words.words);

	React.useEffect(() => {
		console.log("wordsRedux is:", wordsRedux);
	}, [wordsRedux]);

	// функция для перемешивания массива
	const getShuffledArr = (arr: any) => {
		const newArr = arr.slice();
		for (let i = newArr.length - 1; i > 0; i--) {
			const rand = Math.floor(Math.random() * (i + 1));
			[newArr[i], newArr[rand]] = [newArr[rand], newArr[i]];
		}
		return newArr;
	};

	const remember = () => {
		dispatch(addNewWords(words));
		let newWords;
		try {
			newWords = formatWords(words.toString(), separator);
			let randomWords = getShuffledArr(newWords);
			setFormatedWords(randomWords);
		} catch (error) {
			console.log("error:", error);
		}
		// setFormatedWords(newWords);
		// console.log("randomWords:", randomWords);
	};

	const flipAll = () => {
		let newWords = JSON.parse(JSON.stringify(formatedWords));
		newWords = newWords.map((item: any) => {
			return {
				word: item.word,
				translate: item.translate,
				seeWord: flip,
				index: item.index,
			};
		});
		setFormatedWords(newWords);
		setFlip(!flip);
	};

	const chageState = (item: any) => {
		console.log("item.index:", item.index);
		// console.log('index:',formatedWords.findIndex((f:any)=>f.id == item.id))

		let newWords = JSON.parse(JSON.stringify(formatedWords));
		let indexWord = newWords.findIndex((f: any) => f.index == item.index);
		console.log("indexWord:", indexWord);
		newWords[indexWord] = {
			word: item.word,
			translate: item.translate,
			seeWord: !item.seeWord,
			index: item.index,
		};
		setFormatedWords(newWords);
	};

	return (
		<div className={styles.container}>
			<Head>
				<title>Flash cards app</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<main>
				<div className="max-w-[1000px] mx-auto">
					<div className="flex flex-col mt-2">
						<textarea
							spellCheck={false}
							onChange={(e: any) => setWords(e.target.value)}
							className="outline-none p-2"
							cols={30}
							rows={10}
						></textarea>
						<div className="flex justify-between mt-2">
                            <div>
                                <button
                                    onClick={() => setIsInfoOpen(true)}
                                    className="p-4 border-2 border-white hover:bg-white hover:text-black mr-2"
                                >
                                    About
                                </button>
                                <button
                                    onClick={() => setIsHowToUseOpen(true)}
                                    className="p-4 border-2 border-white hover:bg-white hover:text-black mr-2"
                                >
                                    How to use
                                </button>

                            </div>

							<div className="flex justify-end">
								<div className="w-[100px] mr-2">
									<p>Separator is: </p>
									<input
										className="outline-none px-2 py-1 w-[100px]"
										type="text"
										value={separator}
										onChange={(e: any) =>
											setSeparator(e.target.value)
										}
									/>
								</div>
								<button
									onClick={() => remember()}
									className="p-4 border-2 border-white hover:bg-white hover:text-black mr-2"
								>
									Remember
								</button>
								<button
									onClick={() => flipAll()}
									className="p-4 border-2 border-white hover:bg-white hover:text-black"
								>
									Flip all
								</button>
							</div>
						</div>
					</div>

					{formatedWords && (
						<div className="mt-2">
							<div>
								{formatedWords
									.filter(
										(f: any) =>
											f.word.length > 0 &&
											f.translate.length > 0
									)
									.map((item: any) => (
										<div
											onClick={() => chageState(item)}
											className={`cursor-pointer text-xl border-b-[1px] border-[#ddd] select-none py-4 px-2 ${
												item.seeWord
													? "bg-white"
													: "bg-[#eeeeee]"
											}  text-black`}
										>
											{item.seeWord ? (
												<p>{item.word}</p>
											) : (
												<p>{item.translate}</p>
											)}
										</div>
									))}
							</div>
						</div>
					)}
				</div>
			</main>
			{isHowToUseOpen && (
				<div
					onClick={() => setIsHowToUseOpen(false)}
					className="absolute top-0 left-0 w-[100vw] h-[100vh] bg-[#00000059]"
				>
					<div className="bg-gray-500  w-[350px] p-4 mx-auto mt-8">
						<p className="text-xl font-semibold">How to use?</p>
						<p className="mt-4">1. Enter your text:</p>
                        <div className="bg-gray-700 p-2">
                            <p>available / доступный</p>
                            <p>avoid / избегать</p>
                            <p>cause / причина</p>

                        </div>
						<p className="mt-2">2. Input your separator: <span className="bg-gray-700 py-1 px-2">/</span></p>
						<p className="mt-2">3. Press button <span className="bg-gray-700 py-1 px-2">Remember</span></p>
						<p className="mt-2">4. Click <span className="bg-gray-700 py-1 px-2">available</span> to see <span className="bg-gray-700 py-1 px-2">доступный</span></p>
					</div>
				</div>
			)}
			{isInfoOpen && (
				<div
					onClick={() => setIsInfoOpen(false)}
					className="absolute top-0 left-0 w-[100vw] h-[100vh] bg-[#00000059]"
				>
					<div className="bg-gray-500 p-4  w-[350px] mx-auto mt-8">
						<p className="text-xl font-semibold">Info</p>
                        <p className="mt-2">I made this app to learn English words using flash cards.</p>
                        <p className="mt-2">You see a word and if you don't remember the translation, then you can look at it, so you can quickly remember a lot of words</p>
					</div>
				</div>
			)}


		</div>
	);
}
